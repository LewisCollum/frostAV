#+setupfile: ../research.org

#+title: Nodal Lane Detection
#+date: Updated: \today
#+author: Lewis Collum
*Started 03/04/2020*

** Concept Example
   #+begin_src python :results output
class Subject:
    def __init__(self, observers: list):
        self.observers = observers

    def notifyObservers(self, data):
        for observer in self.observers:
            observer.grab(data)

class Observer:
    def grab(self, data):
        print(data)

        
observerA = Observer()
observerB = Observer()
subject = Subject([observerA, observerB])

subject.notifyObservers("pickle")

class Node:
    def __init__(self, strategy, observers: list):
        self.observers = observers
        self.strategy = strategy

    def notifyObservers(self, data):
        for observer in self.observers:
            observer.grab(data)
    
    def grab(self, data):
        self.notifyObservers(self.strategy(data))

nodeB = Node(
    strategy = lambda data: print(data*3),
    observers = [])

nodeA = Node(
    strategy = lambda data: data*2,
    observers = [nodeB])

head = Node(
    strategy = None,
    observers = [nodeA])

head.notifyObservers(data = 1)


def doA(data):
    return data*3

def doB(data):
    return data*2

A = doA(1)
B = doB(A)
print(B)
   #+end_src

   #+RESULTS:
   : pickle
   : pickle
   : 6
   : 6

** Node
   #+begin_src python :tangle source/Node.py
class Node:
    def __init__(self, strategy, observers):
        self.strategy = strategy
        self.observers = observers

    def __call__(self, package):
        for observer in self.observers:
            observer(self.strategy(package))
   #+end_src

** Distributor
   #+begin_src python :tangle source/distributor.py
class SingleDistributor:
    def __init__(self, receiver = None):
        self.receiver = receiver
        
    def __call__(self, package):
        self.receiver(package)

    def connect(self, receiver):
        self.receiver = receiver
        
    def disconnect(self):
        self.receiver = None
        
    
class MultiDistributor:
    def __init__(self, receivers = []):
        self.receivers = receivers

    def __call__(self, package):
        for receiver in self.receivers:
            receiver(package)
        
    def connect(self, receiver):
        self.receivers.append(receiver)

    def disconnect(self):
        self.receivers.clear()

        
class NamingDistributor:
    def __init__(self):
        self.receivers = {}

    def __call__(self, package):
        for receiver in self.receivers[pk.PackageConfig.nameFromDict(package)]:
            receiver.onReceivedPackage(package)
        
    def connect(self, name: str, receiver):
        self.receivers.setdefault(name, []).append(receiver)
        
    def disconnect(self):
        self.receivers.clear()
   #+end_src
** Edge Detect
   #+begin_src python :tangle source/MaskEdgeDetector.py
import cv2

class MaskEdgeDetector:
    def __init__(self, maskLower, maskUpper):
        self.maskLower = maskLower
        self.maskUpper = maskUpper

    def __call__(self, frame):
        mask = cv2.inRange(frame, self.maskLower, self.maskUpper)
        edges = cv2.Canny(mask, 200, 400)
        return edges

class HsvMaskEdgeDetector:
    def __init__(self, maskLower, maskUpper):
        self.maskLower = maskLower
        self.maskUpper = maskUpper

    def __call__(self, frame):
        mask = cv2.inRange(frame, self.maskLower, self.maskUpper)
        edges = cv2.Canny(mask, 200, 400)
        return edges
   #+end_src

** Hough Lines
   #+begin_src python :tangle source/segment.py
import cv2
import numpy

class EdgeSegmentator:
    def __init__(self, distancePrecision, angularPrecision, minimumThreshold):
        self.distancePrecision = distancePrecision
        self.angularPrecision = angularPrecision
        self.minimumThreshold = minimumThreshold
        
    def __call__(self, frame):
        segments = cv2.HoughLinesP(
            frame,
            self.distancePrecision,
            self.angularPrecision,
            self.minimumThreshold,
            numpy.array([]),
            minLineLength=8,
            maxLineGap=4)
        return () if isinstance(segments, type(None)) else segments    
   #+end_src
** Frame Distribution
   #+begin_src python :tangle source/frame_distributor.py
import cv2
import sys

source = sys.argv[1] if len(sys.argv) > 1 else 0
observers = []

def grabCaptureFrame():
    capture = cv2.VideoCapture(source)
    _, frame = capture.read()
    capture.release()
    return frame
    
def sendCapture():
    capture = cv2.VideoCapture(source)
    while cv2.waitKey(33) != ord('q'):
        global frame
        hasFrame, frame = capture.read()
        if not hasFrame: break
        for observer in observers: node(frame)
        
    cv2.waitKey(0)
    capture.release()
    cv2.destroyAllWindows()


def sendFrame(externalFrame):
    global frame
    frame = externalFrame
    for observer in observers: observer(frame)
   #+end_src
** Region of Interest
   #+begin_src python :tangle source/roi.py
import cv2
import numpy

class RegionOfInterest:
    def __init__(self, insetWeight = 1):
        self.insetWeight = insetWeight
        
    def __call__(self, frame):
        height, width = frame.shape
        mask = numpy.zeros_like(frame)
        
        polygon = numpy.array([[
            (width * self.insetWeight/2, 0),
            (width * (1 - self.insetWeight/2), 0),
            (width, height),
            (0, height),
        ]], numpy.int32)
        
        cv2.fillPoly(mask, polygon, 255)
        frame = cv2.bitwise_and(frame, mask)
        return frame        
   #+end_src
** Line Utils
#+begin_src python :tangle source/line.py
import cv2
import numpy

def addLinesToFrame(lines, frame):
    lineFrame = numpy.zeros_like(frame)
    for line in lines:
        x1, y1, x2, y2 = line[0]
        cv2.line(lineFrame, (x1, y1), (x2, y2), (0, 255, 0), 2)
        
    lineFrame = cv2.addWeighted(frame, 0.8, lineFrame, 1, 1)    
    return lineFrame
#+end_src
** Image Displayer
   #+begin_src python :tangle source/displayer.py
import cv2
import numpy

from . import frame_distributor
from . import line

totalDisplayers = 0

def newImageName():
    global totalDisplayers
    name = totalDisplayers
    totalDisplayers += 1
    return name
    

class Displayer:
    def __init__(self):
        self.imageName = newImageName()
    
    def __call__(self, frame):
        cv2.imshow(f"{self.imageName}", frame)


class LineDisplayer:
    def __init__(self):
        self.image = newImageName()
        
    def __call__(self, lines):
        frame = line.addLinesToFrame(lines, frame_distributor.frame)
        cv2.imshow(f"{self.imageName}", frame)
   #+end_src
** White Balancer
   #+begin_src python :tangle source/WhiteBalancer.py
class WhiteBalancer:
    def __call__(self, frame):
        balanced_img = numpy.zeros_like(frame) #Initialize final image

        for i in range(3): #i stands for the channel index 
            hist, bins = numpy.histogram(frame[..., i].ravel(), 256, (0, 256))
            bmin = numpy.min(numpy.where(hist>(hist.sum()*0.0005)))
            bmax = numpy.max(numpy.where(hist>(hist.sum()*0.0005)))
            balanced_img[...,i] = numpy.clip(frame[...,i], bmin, bmax)
            balanced_img[...,i] = (balanced_img[...,i]-bmin) / (bmax - bmin) * 255
            
        return balanced_img
   #+end_src

** Two Line Average
   #+begin_src python :tangle source/TwoLineAverage.py
import numpy

class TwoLineAverage:
    def __init__(self, frameShape, insetPercentage):
        self.height, width, _ = frameShape
        self.leftBoundary = width * (1-insetPercentage)
        self.rightBoundary = width * insetPercentage
        
    def __call__(self, lines):
        lanes = []
        left = []
        right = []
        total = []

        for line in lines:
            x1, y1, x2, y2 = line[0].astype(int)
            top = (x1, y1) if y1 > y2 else (x2, y2)
            bottom = (x1, y1) if y1 < y2 else (x2, y2)
            dx = bottom[0] - top[0]
            dy = bottom[1] - top[1]
            topToFrameBottom = self.height - top[1]
            bottomXIntersept = topToFrameBottom/dy * dx + top[0]
            if bottomXIntersept <= self.leftBoundary:
                left.append(numpy.asarray([bottomXIntersept, *top, *bottom]))
            if bottomXIntersept >= self.rightBoundary:
                right.append(numpy.asarray([bottomXIntersept, *top, *bottom]))

        if len(left) >= 3:
            leftAverage = numpy.mean(left, axis = 0).astype(int)
            lanes.append([[leftAverage[0], self.height, leftAverage[1], leftAverage[2]]])

        if len(right) >= 3:
            rightAverage = numpy.mean(right, axis = 0).astype(int)
            lanes.append([[rightAverage[0], self.height, rightAverage[1], rightAverage[2]]])
            
        return lanes
   #+end_src
** Sandbox
   #+begin_src python :tangle source/sandbox.py
import cv2
import numpy

from Node import Node
import distributor
from MaskEdgeDetector import MaskEdgeDetector
from TwoLineAverage import TwoLineAverage
from WhiteBalancer import WhiteBalancer
import segment
import frame_distributor
from displayer import Displayer, LineDisplayer
import roi
    
twoLineAverageNode = Node(
    strategy = TwoLineAverage(
        frameShape = frame_distributor.grabCaptureFrame().shape,
        insetPercentage = 0.60),
    observers = [LineDisplayer()])

edgeSegmentatorNode = Node(
    strategy = segment.EdgeSegmentator(
        distancePrecision = 1,
        angularPrecision = numpy.pi/180,
        minimumThreshold = 40),
    observers = [twoLineAverageNode])

regionOfInterestNode = Node(
    strategy = roi.RegionOfInterest(insetWeight = 0.75),
    observers = [edgeSegmentatorNode])

cannyNode = Node(lambda mask: cv2.Canny(mask, 200, 400), [edgeSegmentatorNode, Displayer()])

hsvMaskNode = Node(lambda frame: cv2.inRange(frame, numpy.asarray([100, 50, 110]), numpy.asarray([120, 255, 255])), [cannyNode])
labMaskNode = Node(lambda frame: cv2.inRange(frame, numpy.asarray([0, 0, 110]), numpy.asarray([255, 255, 255])), [cannyNode])

labNode = Node(lambda frame: cv2.cvtColor(frame, cv2.COLOR_BGR2LAB), [Displayer(), labMaskNode])
hsvNode = Node(lambda frame: cv2.cvtColor(frame, cv2.COLOR_BGR2HSV), [Displayer(), hsvMaskNode])
balancerNode = Node(WhiteBalancer(), [labNode])

frame_distributor.startAtHead([labNode])
   #+end_src
** InOut
   #+begin_src python :tangle source/inout.py
import cv2
import numpy

from .Node import Node
from .MaskEdgeDetector import MaskEdgeDetector
from .TwoLineAverage import TwoLineAverage
from . import segment
from . import frame_distributor
from . import roi
from . import line

class LineOutputNode:
    def __call__(self, lines):
        self.output = line.addLinesToFrame(lines, frame_distributor.frame) 
        
outputNode = LineOutputNode()
twoLineAverageNode = Node(
    strategy = TwoLineAverage(
        frameShape = frame_distributor.grabCaptureFrame().shape,
        insetPercentage = 0.60),
    observers = [outputNode])
edgeSegmentatorNode = Node(
    strategy = segment.EdgeSegmentator(
        distancePrecision = 1,
        angularPrecision = numpy.pi/180,
        minimumThreshold = 40),
    observers = [twoLineAverageNode])
regionOfInterestNode = Node(
    strategy = roi.RegionOfInterest(insetWeight = 0.75),
    observers = [edgeSegmentatorNode])
cannyNode = Node(lambda mask: cv2.Canny(mask, 200, 400), [edgeSegmentatorNode])
labMaskNode = Node(lambda frame: cv2.inRange(frame, numpy.asarray([0, 0, 110]), numpy.asarray([255, 255, 255])), [cannyNode])
labNode = Node(lambda frame: cv2.cvtColor(frame, cv2.COLOR_BGR2LAB), [labMaskNode])

frame_distributor.observers = [labNode]
   #+end_src
** init
   #+begin_src python :tangle source/__init__.py
from . import inout   
   #+end_src
** Scrap
   #+begin_src python
class ClaheEdgeDetector:
    def __init__(self, clahe):
        self.clahe = clahe
        
    def __call__(self, frame):
        f = frame.copy()
        f[:, :, 1] = self.clahe.apply(f[:, :, 1])
        return f

claheHSVNode = Node(
    strategy = ClaheEdgeDetector(clahe = cv2.createCLAHE(10, (10, 10))),
    distributor = distributor.MultiDistributor([Displayer()]))


def displayAsVectors(frame): print(frame)

def slope(segments):
    if len(segments) != 0:
        print(numpy.mean(segments, 0))
    
        for segment in segments:
            x1, y1, x2, y2 = segment[0]
            dy = y2-y1
            dx = x2-x1
            r = numpy.sqrt(dy**2 + dx**2)
            theta = numpy.pi/2 if dx == 0 else numpy.arctan(dy/dx)
            print(segment[0])
            print(r, theta)

def meanSegmentSlope(segments):
    for segment in segments:
        x1, y1, x2, y2 = segment[0]
        #...

segmentSlopeAverager = Node(
    strategy = meanSegmentSlope,
    distributor = distributor.MultiDistributor([]))

   #+end_src
   #+RESULTS:
** Polar Fitting
   #+begin_src python :results output
import numpy

x = (0, 0)
y = (1, 4)
A = numpy.polyfit(y, x, deg=1)
A[1] = -A[1]/A[0]
A[0] = 1/A[0]
print(A)
   #+end_src

   #+RESULTS:
   : [inf nan]
